funcs:
  - name: isValid
    type: asserter
    body: |
      function(text, name) {
        text = text.substring(2).trim()
        var words = text.split(" ")
        if (words[0].toLowerCase() === "deprecated") {
          return false
        }
        return words[0].toLowerCase() !== name.toLowerCase()
      }
  - name: fixComment
    type: resolver
    body: |
      function (text, name) {
        function testre(pat, text) {
          var re = new RegExp(pat)
          return re.test(text)
        }

        function uc(s) {
          return s.toUpperCase();
        }

        function lc(s) {
          return s.toLowerCase();
        }

        function capitalize(s) {
          return uc(s.charAt(0)) + s.slice(1);
        }

        function uncapitalize(s) {
          return lc(s.charAt(0)) + s.slice(1);
        }

        function removeInitialWhitespace(s) {
          return s.replace(new RegExp("^ *", "i"), "")
        }

        function colonify(s) {
          plurifiable_verbs.forEach(function(verb) {
            if (testre("^" + lc(verb) + "s", lc(s))) {
              s = " " + s;
            }
          })

          verbs.forEach(function(verb) {
            if (testre("^" + lc(verb), lc(s))) {
              s = " " + s;
            }
          })

          if (testre("^ ", s)) {
            return s;
          }

          return ": " + s;
        }

        function setDifference(A, B) {
          A.filter(function(x) { return B.indexOf(x) < 0 })
        }

        function firstWord(s) {
          return s.split(" ")[0]
        }

        function filterEmpty(arr) {
          // ES6: subwords = subwords.filter(Boolean)
          return arr.filter(function(v){return v!==''});
        }

        function splitCamel(s) {
          return filterEmpty(s.split(/([A-Z][a-z]*)/));
        }

        // Makes an educated guess to whether or not the first word is an old
        // function name and fixes it.
        function updateOld(s, name) {
          var words = s.split(" ")
        
          firstword=words[0];
        
          // Ignore when there are special characters. Allow a couple of () though so it can be rewritten
          if (testre("[^A-Za-z0-9()]", firstword)) {
            return s;
          }
        
          subwords = splitCamel(firstword);
          name_subwords = splitCamel(name);
      
          // Ignore words without camel case. Sometimes the 'new' first word is not on old function name
          if (subwords.length === 1) return s;
      
          same = setIntersection(subwords, name_subwords)
      
          if (same.length > 0) {
              words[0] = name;
          } else {
              //Split first word into camel-cased subwords
              subwords.forEach(function(subword) {
                if (subword.length < 4) return;
                // If start of comment smells like an old name
                if (lc(subword).indexOf(lc(name)) !== -1 || lc(name).indexOf(lc(subword)) !== -1) {
                  words[0] = name;
                }
              })
          }
        
          return words.join(" ")
        }

        // modal_verbs etc.
        var verbs = ["will", "does", "is", "exist"];
        var plurifiable_verbs = ["split", "purge", "remove", "test", "ensure", "replace", "get", "start",
                     "validate", "execute", "demonstrate", "compare", "hook",
                     "report", "take", "clear", "handle", "decode",
                     "unregister", "capture", "retrieve", "declare", "check",
                     "return", "render", "add", "read", "write"];
      

        // If one of these tokens appear followed by an s, it should NOT be treated as a verb
        var verb_plural_blacklist = ["lot", "alia", "arg", "resource",
                     "event", "GET"];

        var nouns = ["test", "function", "method"];
        var adjectives = ["various", "exists"];
        var determiners = ["the", "this"];

        function capitalizeLeadingDeterminer(s) {
          determiners.forEach(function(determiner) {
            s = s.replace(new RegExp("^" + determiner + " +", "i"), capitalize(determiner) + " ")
          })
          return s
        }

        function fixLeadingVerb(s) {
          // Make these replacements before removing from the front
          plurifiable_verbs.forEach(function(verb) {
            if (! includes(verb_plural_blacklist, firstWord(s))) {
              var pverb = verb + "s"

              s = s.replace(new RegExp("^" + verb + "s\? +", "i"), pverb + " ")

              adjectives.forEach(function(adjective) {
                s = s.replace(new RegExp("^" + pverb + " " + adjective + " ", "i"), pverb + " " + lc(adjective) + " ")
              })
            }
          })

          return s
        }

        function includes(arr,obj) {
          // As of ECMAScript 2016 you can use includes()
          return (arr.indexOf(obj) != -1);
        }

        function setUnion (x, y) {
          var obj = {};
          for (var i = x.length-1; i >= 0; -- i)
            obj[x[i]] = x[i];
          for (var i = y.length-1; i >= 0; -- i)
            obj[y[i]] = y[i];
          var res = []
          for (var k in obj) {
           if (obj.hasOwnProperty(k)) // <-- optional
            res.push(obj[k]);
          }
          return res;
        }

        function setIntersection(a, b) {
          var ai=0, bi=0;
          var result = [];
        
          while( ai < a.length && bi < b.length )
          {
             if      (a[ai] < b[bi] ){ ai++; }
             else if (a[ai] > b[bi] ){ bi++; }
             else /* they're equal */
             {
               result.push(a[ai]);
               ai++;
               bi++;
             }
          }
        
          return result;
        }
        
        function removeThisIfVerb(s) {
          setUnion(verbs, plurifiable_verbs).forEach(function(verb) {
            s = s.replace(new RegExp("^This " + verb + " ", "i"), verb + " ")
          })
          return s
        }

        function rewordComment(s, name, commentChar) {
          if (testre("^[a-zA-Z]+:", s) || testre("^TODO ", s)) {
              return s
          }

          // Removing 'The' is fine, unless it is replaced by something
          // without a capital letter because that may be a common noun, such
          // as 'distance', there the function comment is on a 'Distance'
          // function.
          s = s.replace(new RegExp("^(The) " + capitalize(name) + " "), "")

          // Make these replacements before removing from the front
          s = fixLeadingVerb(s)
          s = capitalizeLeadingDeterminer(s)

          nouns.forEach(function(noun) {
            s = s.replace(new RegExp("^(This) " + noun + " ", "i"), "")
          })

          s = updateOld(s, name)
          s = fixLeadingVerb(s)
          s = s.replace(new RegExp("^[a-z]+([A-Z]+[a-z0-9]+)+ "), "") // Remove leading camelCase
          s = s.replace(new RegExp("^([A-Z]+[a-z0-9]+){2,} "), "")    // Remove leading PascalCase. Must come after remove name
          s = removeThisIfVerb(s)
          s = s.replace(new RegExp("^Purpose ", "i"), "The purpose ")

          return name + colonify(s)
        }

        var commentChar = text.substring(0, 2)
        var commentString = text.substring(2).trim()

        commentString = commentString.replace(new RegExp("^[/*]* ", "i"), " ") // Remove extra leading comment chars

        // Do nothing if comment does not start with alphanumerics
        if (! testre("^ ?[A-Za-z]", commentString)) {
          return text
        }

        commentString = removeInitialWhitespace(commentString)
        return commentChar + " " + rewordComment(commentString, name, commentChar)
      }
tenets:
  - name: comment-first-word-as-subject
    flows:
      codelingo/docs:
        title: Comment First Word as Subject
        body: |
          Doc comments work best as complete sentences, which allow a wide variety of automated presentations.
          The first sentence should be a summary that starts with the name being declared.
      codelingo/review:
        comment: |
          Every exported function in a program should have a doc comment. The first sentence should be a summary that starts with the name ({{funcName}}) being declared.
          From [effective go](https://golang.org/doc/effective_go.html#commentary).
      codelingo/rewrite:
        place: holder
    query: |
      import codelingo/ast/go

      go.file(depth = any):
        exclude:
          filename as filename
          regexp(/*_test.go/, filename)
        go.func_decl(depth = any):
          go.comment_group:
            @review comment
            @rewrite --replace "{{fixComment(commText, funcName)}}"
            go.comment:
              sibling_order == 0
              text as commText
          go.ident:
            public == "true"
            name as funcName
            isValid(commText, funcName)