funcs:
  - name: isValid
    type: asserter
    body: |
      function(text, name) {
        text = text.substring(2).trim()
        var words = text.split(" ")
        if (words[0].toLowerCase() === "deprecated") {
          return false
        }
        return words[0].toLowerCase() !== name.toLowerCase()
      }
  - name: fixComment
    type: resolver
    body: |
      function(text, name) {
        var commentChar = text.substring(0, 2)
        text = text.substring(2).trim()
        var words = text.split(" ")
        var result
        var firstWord = words[0].split(/([A-Z][a-z]*)/)
        firstWord.forEach(function(word) {
          if (word.length < 4) return
          // If start of comment smells like an old name
          if (word.toLowerCase().indexOf(name.toLowerCase()) !== -1 ||
              name.toLowerCase().indexOf(word.toLowerCase()) !== -1) {              
            words[0] = name
            result = words.join(" ")
          }  
        })
        if (result == undefined) {
          return commentChar + " " + name + " " + words.join(" ")
        }
        return commentChar + " " + result
      }
tenets:
  - name: comment-first-word-as-subject
    flows:
      codelingo/docs:
        title: Comment First Word as Subject
        body: |
          Doc comments work best as complete sentences, which allow a wide variety of automated presentations. 
          The first sentence should be a one-sentence summary that starts with the name being declared.
      codelingo/review:
        comment: |
          The first sentence should be a one-sentence summary that starts with the name ({{funcName}}) being declared.
      codelingo/rewrite:
        place: holder
    query: |
      import codelingo/ast/go

      # Only look at exported functions
      go.func_decl(depth = any):
        go.comment_group:
          @review comment
          @rewrite --replace "{{fixComment(commText, funcName)}}"
          go.comment:
            sibling_order == 0
            text as commText
        go.ident:
          name as funcName
          public == "true"
          isValid(commText, funcName)

tenets:
  - name: comment-first-word-when-empty
    flows:
      codelingo/review:
        comment: |
          The first sentence should be a one-sentence summary that starts with the name ({{funcName}}) being declared.
      codelingo/rewrite:
        place: holder
    query: |
      import codelingo/ast/go

      @review comment
      @rewrite --prepend --line "// {{funcName}} is a function."
      go.func_decl(depth = any):
        exclude:
          go.comment_group
        go.ident:
          name as funcName
          public == "true"